#+TITLE: Programming Languages Part A

* Homework 2
You will write 11 SML functions (not counting local helper functions), 4 related
to “name substitutions” and 7 related to a made-up solitaire card game.

Your solutions must use pattern-matching. You may not use the functions =null=,
=hd=, =tl=, =isSome=, or =valOf=, nor may you use anything containing a =#=
character or features not used in class (such as mutation). Note that list order
does not matter unless specifically stated in the problem.

Download ~hw2provided.sml~ from the course website. The provided code defines
several types for you. You will not need to add any additional datatype bindings
or type synonyms.

The sample solution, not including challenge problems, is roughly 130 lines,
including the provided code. Do not miss the “Important Caveat” and “Assessment”
after the “Type Summary.”

1. This problem involves using first-name substitutions to come up with
   alternate names. For example, Fredrick William Smith could also be Fred
   William Smith or Freddie William Smith. Only part (d) is specifically about
   this, but the other problems are helpful.

   #+begin_src sml :session *sml* :exports none
fun same_string(s1 : string, s2 : string) =
    s1 = s2
   #+end_src

   #+RESULTS:
   : val same_string = fn : string * string -> bool

   a) Write a function =all_except_option=, which takes a =string= and a =string
      list=. Return =NONE= if the string is not in the list, else return =SOME
      lst= where =lst= is identical to the argument =list= except the string is
      not in it. You may assume the string is in the list at most once. Use
      =same_string=, provided to you, to compare strings. Sample solution is
      around 8 lines.

      #+begin_src sml :session *sml* :exports both
fun all_except_option(str, strs) =
    let fun aux(strs, acc) =
            case (strs, acc) of
                ([], _) => NONE
              | (x::xs, checked) => if same_string(str, x) then SOME (checked @ xs) else aux(xs, x::checked)
    in
        aux(strs, [])
    end

val test1 = all_except_option ("string", ["string"]) = SOME []
      #+end_src

      #+RESULTS:
      : val all_except_option = fn : string * string list -> string list option
      : val test1 = true : bool

   b) Write a function =get_substitutions1=, which takes a =string list list= (a
      list of list of strings, the substitutions ) and a =string s= and returns
      a =string list=. The result has all the strings that are in some list in
      substitutions that also has =s=, but =s= itself should not be in the
      result. Example:

      #+begin_example sml
get_substitutions1([["Fred","Fredrick"],["Elizabeth","Betty"],["Freddie","Fred","F"]], "Fred")
(* answer: ["Fredrick","Freddie","F"] *)
      #+end_example

      Assume each list in substitutions has no repeats. The result will have
      repeats if =s= and another string are both in more than one list in
      substitutions. Example:

      #+begin_example sml
get_substitutions1([["Fred","Fredrick"],["Jeff","Jeffrey"],["Geoff","Jeff","Jeffrey"]], "Jeff")
(* answer: ["Jeffrey","Geoff","Jeffrey"] *)
      #+end_example

      Use part (a) and ML’s list-append (=@=) but no other helper functions.
      Sample solution is around 6 lines.

      #+begin_src sml :session *sml* :exports both
fun get_substitutions1(substitutions, s) =
    case (substitutions, s) of
        ([], _) => []
      | (x::xs, s) => case all_except_option (s, x) of
                          NONE => get_substitutions1 (xs, s)
                        | SOME lst => lst @ get_substitutions1 (xs, s)

val test2 = get_substitutions1 ([["foo"],["there"]], "foo") = []
      #+end_src

      #+RESULTS:
      : val get_substitutions1 = fn : string list list * string -> string list
      : val test2 = true : bool

   c) Write a function =get_substitutions2=, which is like =get_substitutions1=
      except it uses a tail-recursive local helper function.

      #+begin_src sml :session *sml* :exports both
fun get_substitutions2(substitutions, s) =
    let fun aux(substitutions) =
            case substitutions of
                [] => []
              | x::xs => case all_except_option (s, x) of
                             NONE => aux (xs)
                           | SOME lst => lst @ aux (xs)
    in
        aux (substitutions)
    end

val test3 = get_substitutions2 ([["foo"],["there"]], "foo") = []
      #+end_src

      #+RESULTS:
      : val get_substitutions2 = fn : string list list * string -> string list
      : val test3 = true : bool

   d) Write a function =similar_names=, which takes a =string list list= of
      substitutions (as in parts (b) and (c)) and a full name of type
      ={first:string,middle:string,last:string}= and returns a list of full
      names (type ={first:string,middle:string,last:string}= list). The result
      is all the full names you can produce by substituting for the first name
      (and only the first name) using substitutions and parts (b) or (c). The
      answer should begin with the original name (then have 0 or more other
      names). Example:

      #+begin_example sml
similar_names([["Fred","Fredrick"],["Elizabeth","Betty"],["Freddie","Fred","F"]],
{first="Fred", middle="W", last="Smith"})
(* answer: [{first="Fred", last="Smith", middle="W"},
{first="Fredrick", last="Smith", middle="W"},
{first="Freddie", last="Smith", middle="W"},
{first="F", last="Smith", middle="W"}] *)
      #+end_example

      Do not eliminate duplicates from the answer. Hint: Use a local helper
      function. Sample solution is around 10 lines.

      #+begin_src sml :session *sml* :exports both
fun similar_names(substitutions, full_name) =
    case full_name of
        {first=f, last=l, middle=m} =>
        let fun zip_names (substitutions) =
                case substitutions of
                    [] => []
                  | x::xs => {first= x, last= l, middle= m} :: zip_names xs
        in
            full_name :: zip_names (get_substitutions2 (substitutions, f))
        end

val test4 = similar_names ([["Fred","Fredrick"],["Elizabeth","Betty"],["Freddie","Fred","F"]], {first="Fred", middle="W", last="Smith"}) =
	        [{first="Fred", last="Smith", middle="W"}, {first="Fredrick", last="Smith", middle="W"},
	         {first="Freddie", last="Smith", middle="W"}, {first="F", last="Smith", middle="W"}]
      #+end_src

      #+RESULTS:
      : val similar_names = fn :
      :   string list list * {first:string, last:'a, middle:'b}
      :    -> {first:string, last:'a, middle:'b} list
      : val test4 = true : bool

2. This problem involves a solitaire card game invented just for this question.
   You will write a program that tracks the progress of a game; writing a game
   player is a challenge problem. You can do parts (a)–(e) before understanding
   the game if you wish.

   A game is played with a =card-list= and a =goal=. The player has a list of
   =held-cards=, initially empty. The player makes a move by either drawing,
   which means removing the first =card= in the =card-list= from the =card-list=
   and adding it to the =held-cards=, or discarding, which means choosing one of
   the =held-cards= to remove. The game ends either when the player chooses to
   make no more moves or when the sum of the values of the =held-cards= is
   greater than the goal.

   The objective is to end the game with a low score (0 is best). Scoring works
   as follows: Let =sum= be the sum of the values of the held-cards. If =sum= is
   greater than =goal=, the preliminary score is three times =(sum−goal)=, else
   the preliminary score is =(goal −sum)=. The score is the preliminary score
   unless all the held-cards are the same color, in which case the score is the
   preliminary score divided by 2 (and rounded down as usual with integer
   division; use ML’s =div= operator).

   #+begin_src sml :session *sml* :exports both
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int
type card = suit * rank

datatype color = Red | Black
datatype move = Discard of card | Draw

exception IllegalMove
   #+end_src

   #+RESULTS:
   : datatype suit = Clubs | Diamonds | Hearts | Spades
   : datatype rank = Ace | Jack | King | Num of int | Queen
   : type card = suit * rank
   : datatype color = Black | Red
   : datatype move = Discard of suit * rank | Draw
   : exception IllegalMove

   a) Write a function =card_color=, which takes a card and returns its color
      (spades and clubs are black, diamonds and hearts are red). Note: One
      case-expression is enough.

      #+begin_src sml :session *sml* :exports both
fun card_color (suit, rank) =
    case suit of
        Clubs => Black
      | Spades => Black
      | Diamonds => Red
      | Hearts => Red

val test5 = card_color (Clubs, Num 2) = Black
      #+end_src

      #+RESULTS:
      : val card_color = fn : suit * 'a -> color
      : val test5 = true : bool

   b) Write a function =card_value=, which takes a =card= and returns its value
      (numbered cards have their number as the value, aces are 11, everything
      else is 10). Note: One case-expression is enough.

      #+begin_src sml :session *sml* :exports both
fun card_value (suit, rank) =
    case rank of
        Num i => i
      | Ace => 11
      | _ => 10

val test6 = card_value (Clubs, Num 2) = 2
      #+end_src

      #+RESULTS:
      : val card_value = fn : 'a * rank -> int
      : val test6 = true : bool

   c) Write a function =remove_card=, which takes a list of cards =cs=, a card
      =c=, and an exception =e=. It returns a list that has all the elements of
      =cs= except =c=. If =c= is in the list more than once, remove only the
      first one. If =c= is not in the list, raise the exception =e=. You can
      compare cards with ~=~.

      #+begin_src sml :session *sml* :exports both
fun remove_card(cs, c, e) =
    case cs of
        [] => raise e
      | x::xs => if x = c then xs else x :: remove_card(xs, c, e)

val test7 = remove_card ([(Hearts, Ace)], (Hearts, Ace), IllegalMove) = []
      #+end_src

      #+RESULTS:
      : stdIn:30.23 Warning: calling polyEqual
      : val remove_card = fn : ''a list * ''a * exn -> ''a list
      : val test7 = true : bool

   d) Write a function =all_same_color=, which takes a list of cards and returns
      =true= if all the cards in the list are the same color. Hint: An elegant
      solution is very similar to one of the functions using nested
      pattern-matching in the lectures.

      #+begin_src sml :session *sml* :exports both
fun all_same_color(cs)=
    case cs of
        [] => true
      | head::[] => true
      | head::neck::rest => if card_color head = card_color neck
                            then all_same_color (neck :: rest)
                            else false

val test8 = all_same_color [(Hearts, Ace), (Hearts, Ace)] = true
      #+end_src

      #+RESULTS:
      : val all_same_color = fn : (suit * 'a) list -> bool
      : val test8 = true : bool

   e) Write a function =sum_cards=, which takes a list of cards and returns the
      sum of their values. Use a locally defined helper function that is tail
      recursive. (Take “calls use a constant amount of stack space” as a
      requirement for this problem.)

      #+begin_src sml :session *sml* :exports both
fun sum_cards(cs) =
    let fun aux (cs, acc) =
            case cs of
                [] => 0 + acc
              | x::xs => aux (xs, acc + card_value x)
    in
        aux (cs, 0)
    end

val test9 = sum_cards [(Clubs, Num 2),(Clubs, Num 2)] = 4
      #+end_src

      #+RESULTS:
      : val sum_cards = fn : ('a * rank) list -> int
      : val test9 = true : bool

   f) Write a function =score=, which takes a =card list= (the held-cards) and
      an =int= (the goal) and computes the score as described above.

      #+begin_src sml :session *sml* :exports both
fun score(card_list, goal) =
    let val sum = sum_cards card_list
        val preliminary = if sum > goal then (sum - goal) * 3
                          else goal - sum
    in
        if all_same_color card_list
        then preliminary div 2
        else preliminary
    end

val test10 = score ([(Hearts, Num 2),(Clubs, Num 4)],10) = 4
      #+end_src

      #+RESULTS:
      : val score = fn : (suit * rank) list * int -> int
      : val test10 = true : bool

   g) Write a function =officiate=, which “runs a game.” It takes a card list
      (the =card-list=) a move list (what the player “does” at each point), and
      an int (the =goal=) and returns the score at the end of the game after
      processing (some or all of) the =moves= in the move list in order. Use a
      locally defined recursive helper function that takes several arguments
      that together represent the current state of the game. As described above:

      + The game starts with the =held-cards= being the empty list.
      + The game ends if there are no more moves. (The player chose to stop
        since the move list is empty.)
      + If the player discards some card =c=, play continues (i.e., make a
        recursive call) with the =held-cards= not having =c= and the =card-list=
        unchanged. If =c= is not in the =held-cards=, raise the =IllegalMove=
        exception.
      + If the player draws and the =card-list= is (already) empty, the game is
        over. Else if drawing causes the sum of the =held-cards= to exceed the
        goal, the game is over (after drawing). Else play continues with a
        larger =held-cards= and a smaller =card-list=.

      Sample solution for (g) is under 20 lines.

      #+begin_src sml :session *sml* :exports both
fun officiate(card_list, move_list, goal) =
    let fun aux(deck, moves, held_cards) =
            case (deck, moves) of
                (_, []) => score (held_cards, goal)
              | (_, Discard(c)::ms) => aux (deck, ms, remove_card (held_cards, c, IllegalMove))
              | ([], Draw::ms) => score (held_cards, goal)
              | (x::xs, Draw::ms) =>
                let val new_held = x :: held_cards in
                    if sum_cards new_held > goal
                    then score (new_held, goal)
                    else aux(xs, ms, new_held)
                end
    in
        aux (card_list, move_list, [])
    end

val test11 = officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw], 15) = 6
      #+end_src

      #+RESULTS:
      : val officiate = fn : (suit * rank) list * move list * int -> int
      : val test11 = true : bool

3. Challenge Problems:

   a) Write =score_challenge= and =officiate_challenge= to be like their
      non-challenge counterparts except each ace can have a value of 1 or 11 and
      =score_challenge= should always return the least (i.e., best) possible
      score. (Note the game-ends-if-sum-exceeds-goal rule should apply only if
      there is no sum that is less than or equal to the goal.) Hint: This is
      easier than you might think.

      #+begin_src sml :session *sml* :exports both
(* fun card_value (suit, rank) = *)
(*     case rank of *)
(*         Num i => i *)
(*       | Ace => 11 *)
(*       | _ => 10 *)

fun score(card_list, goal) =
    let val sum = sum_cards card_list
        val preliminary = if sum > goal then (sum - goal) * 3
                          else goal - sum
    in
        if all_same_color card_list
        then preliminary div 2
        else preliminary
    end
fun score_challenge (card_list, goal) =
      #+end_src

   b) Write =careful_player=, which takes a =card-list= and a =goal= and returns
      a =move-list= such that calling =officiate= with the =card-list=, the
      =goal=, and the =move-list= has this behavior:

      + The value of the held cards never exceeds the goal.
      + A card is drawn whenever the goal is more than 10 greater than the value
        of the held cards. As a detail, you should (attempt to) draw, even if no
        cards remain in the card-list.
      + If a score of 0 is reached, there must be no more moves.
      + If it is possible to reach a score of 0 by discarding a card followed by
        drawing a card, then this must be done. Note =careful_player= will have
        to look ahead to the next card, which in many card games is considered
        “cheating.” Also note that the previous requirement takes precedence:
        There must be no more moves after a score of 0 is reached even if there
        is another way to get back to 0.

      Notes:
      + There may be more than one result that meets the requirements above. The
        autograder should work for any correct strategy — it checks that the result
        meets the requirements.
      + This problem is not a continuation of problem 3(a). In this problem, all
        aces have a value of 11.
